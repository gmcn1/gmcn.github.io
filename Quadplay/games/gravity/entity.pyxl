const entity_array = []


def collision_callback(A, B):
    if overlaps(A, B, false):
        const a_shield = is_shield_active(A)
        const b_shield = is_shield_active(B)
        
        if a_shield and b_shield and dot(B.vel - A.vel, B.pos - A.pos) < 0:
            // Bounce if both shielded and converging
            play_sound({
                sound: atmosphere_bounce_sound,
                playback_rate: 25%,
                volume: 60%,
                pan: A.pos})
                
            // All ships have the same mass, so swap velocities
            // during a collision and slightly amplify
            const temp = A.vel
            A.vel = 1.1 xy(B.vel)
            B.vel = 1.1 xy(temp)
                        
        return [
            if not a_shield then explode_entity(A) else iterate.CONTINUE, 
            if not b_shield then explode_entity(B) else iterate.CONTINUE]        



/* Returns iterate.REMOVE. 

   If the entity is a ship, removes from ship_array. 
   If the entity is an asteroid, fractures.
   
   Never removes from entity_array. */
def explode_entity(entity):
    // Particles
    const N = entity_area(entity) * (if entity.name == "asteroid" then 25% else 100%)
    for i < N:
        spawn_particle(
            entity.pos + 40% entity.size.x * random_within_circle(),
            entity.vel + random(1, 3) * random_on_circle(),
            entity.override_color default #bbb, 
            0, 
            random_integer(4, 12)² * (if entity.gamepad then 250% else 100%))
    
    if entity.name == "asteroid" and 75% entity.scale.x > 30%:
        // This is an asteroid. Divide in half until too small
        const axis = random_on_circle()
        for i < 2:
            // Make heavier and add drag as they break up
            // to encourage falling into the sun. Get brighter
            // as smaller to make easier to see
            push(entity_array, make_entity({
                …entity,
                spawn_frame: mode_frames,
                pos: entity.pos + entity.size.x * entity.scale.x * axis * (i - ½),
                vel: entity.vel + 150% axis * (i - ½),
                spin: random(0.5°, 1.5°) * random_sign(),
                drag: entity.drag + 0.004,
                density: 150% entity.density,
                override_color: 108% entity.override_color,
                angle: 360° ξ,
                scale: 75% entity.scale}))
    
    
    if entity.gamepad:
        // This is a ship. Break up into wreckage
        for i < 3:
            const dir = random_on_circle()
            const sprite = shapes[random_integer(0, 9)][0]

            push(entity_array, make_entity({
                name: "wreckage",
                pos: entity.pos + 20 dir,
                vel: entity.vel + ξ * dir,
                drag: 0,
                angle: 360° ξ,
                override_color: entity.override_color,
                density: TORPEDO_DENSITY,
                sprite: sprite,
                explode_sound: torpedo_explode_sound,
                scale: 45%,
                child_array: [
                    // White glowing core
                    make_entity({
                        density: 0,
                        sprite: sprite,
                        scale_in_parent: 50% xy(1, 1)
                    })]}))
                
        stop_audio(entity.thrust_audio)
        stop_audio(entity.shield_audio)
        remove_values(ship_array, entity)
    
    // Don't play too many simultaneous explosion sounds; if something
    // just spawned, don't play a sound for it
    if entity.explode_sound and (not entity.spawn_frame or entity.spawn_frame < mode_frames - 1):
        play_sound({sound: entity.explode_sound, pan: entity.pos, volume: 90%})
    
    return iterate.REMOVE



def is_shield_active(ship):
    return ship.gamepad and get_audio_status(ship.shield_audio).state == "PLAYING"
    


/* Base iterate callback for all entities */
def update_entity(entity):
    if entity.gamepad:
        if entity.gamepad.status == "bot": 
            update_bot(entity)
        update_ship(entity)
    
    for sun in sun_array:
        entity.force += gravity_force(entity, sun)
        
    entity.force += gravity_force(entity, planet)
    
    // Simulate and wrap around the arena
    entity_simulate(entity, ∅, {size: SCREEN_SIZE * ARENA_SCALE, pos: xy(150 planet.orbit_side, 0)}, "loop")
    draw_entity(entity)

    // Dots showing enabled features on ships   
    if entity.thrust_enabled:
        draw_point(entity.pos + entity.scale.x * 25 angle_to_xy(entity.angle + 180°), entity.override_color)
    
    if entity.torpedo_enabled:
        draw_point(entity.pos + entity.scale.x * 24 angle_to_xy(entity.angle), entity.override_color)

    if entity.shield_enabled:
        for i < 2:
            draw_point(entity.pos + entity.scale.x * 28 angle_to_xy(entity.angle + 120° sign(i - ½)), entity.override_color)
    
    if not is_shield_active(entity):
        for sun in sun_array:
            if overlaps(entity, sun, false):
                return explode_entity(entity)
    
    if overlaps(entity, planet, false):
        const planet_buster = (magnitude(entity.vel) * entity_mass(entity)) ≥ PLANET_BUSTER_MOMENTUM
        
        if planet_buster:
            // Destroy the planet
            explode_planet(planet, entity.vel)
        
        if is_shield_active(entity):
            if not planet_buster:
                play_sound({
                    sound: atmosphere_bounce_sound,
                    playback_rate: 25%,
                    volume: 75%,
                    pan: entity.pos})
                    
                // Bounce off planet when using shields
                const U = direction(planet.pos - entity.pos)
                const V = perp(U)
                entity.vel = dot(entity.vel, V) * V - max(2.25, |dot(entity.vel, U)|) * U
        else:
            // Destroy on collision with sun or planet
            return explode_entity(entity)


