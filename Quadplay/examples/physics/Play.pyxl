Play
════════════════════════════════════════════════════════════════════════

// Object the user is driving
let control  = 0
const physics  = make_physics()
const particle_array = []


const pendulum = physics_add_entity(physics, make_entity({shape: "rect", size: xy(55, 10), pos: xy(220, 220), drag: 0, density: 2}))

// Directly controlled by the player
const box      = physics_add_entity(physics, make_entity({shape: "rect", size: xy(40, 15), pos: xy(70, 50)}))

// Car
const carGroup = make_contact_group()
const wheel1   = physics_add_entity(physics, make_entity({shape: "disk", size: xy(12, 12), pos: xy(100, 20), density: 2, friction: 90%, stiction_factor: 50%, restitution: 0%, contact_group: carGroup}))
const wheel2   = physics_add_entity(physics, make_entity({shape: "disk", size: xy(12, 12), pos: xy(120, 20), density: 2, friction: 10%, stiction_factor: 10%, restitution: 0%, contact_group: carGroup}))
const carFrame = physics_add_entity(physics, make_entity({shape: "rect", size: xy(34, 6), pos: xy(110, 22), contact_group: carGroup}))
physics_attach(physics, "pin", {entityA: carFrame, pointA: xy(-carFrame.size.x/3.5, -1), entityB: wheel1})
physics_attach(physics, "pin", {entityA: carFrame, pointA: xy(carFrame.size.x/3.5, -1), entityB: wheel2})

const platform = physics_add_entity(physics, make_entity({shape: "rect", size: xy(50, 10), pos: xy(200, 120), friction: 1, stiction_factor: 10, density: infinity}))
const ball     = physics_add_entity(physics, make_entity({shape: "disk", size: xy(10, 10), pos: platform.pos + xy(20, -25)}))

const elevator = physics_add_entity(physics, make_entity({shape: "rect", size: xy(20, 5), pos: xy(15, 5), friction: 1, stiction_factor: 10, density: infinity}))

// The welded cross
const weldBox1 = physics_add_entity(physics, make_entity({shape: "rect", size: xy(30, 5), pos: xy(70, 80)}))
const weldBox2 = physics_add_entity(physics, make_entity({shape: "rect", size: xy(5, 30), pos: xy(70, 80)}))

// Newton's cradle 
const newton1  = physics_add_entity(physics, make_entity({shape: "disk", size: xy(19.5, 19.5), pos: xy(65, 170), density: 10, drag: 0.001, restitution: 110%, friction: 0}))
const newton2  = physics_add_entity(physics, make_entity({shape: "disk", size: xy(19.5, 19.5), pos: xy(85, 170), density: 10, drag: 0.001, restitution: 110%, friction: 0}))
const newton3  = physics_add_entity(physics, make_entity({shape: "disk", size: xy(19.5, 19.5), pos: xy(155, 220), density: 10, drag: 0.001, restitution: 110%, friction: 0}))

// Trigger
const trigger  = physics_add_entity(physics, make_entity({name: "trigger", shape: "rect", size: xy(20, 5), pos:xy(110, 103), density: infinity, is_sensor: true}))
const spinner  = physics_add_entity(physics, make_entity({shape: "rect", size: xy(28, 6), pos: xy(312, 142), density: 12, stiction: 10, friction: 1}))
physics_attach(physics, "pin", {entityB: spinner});

// Character with gyroscope
const person  = physics_add_entity(physics, make_entity({shape: "rect", size: xy(10, 20), pos: xy(40, 15)}))
const head = physics_add_entity(physics, make_entity({shape: "disk", size: xy(9, 9), pos: xy(40, 30)}))
physics_attach(physics, "pin", {entityA: person, pointA: xy(0, 14.5), entityB: head})
physics_attach(physics, "gyro", {entityB: person, angle: 0°})

const CATEGORY = {
    BALL: 0b010,
    WALL: 0b100
}

// Boxes on platform:
physics_add_entity(physics, make_entity({shape: "rect", size: xy(20, 10), pos: xy(platform.pos.x, 150), vel: xy(1, 0)}))
physics_add_entity(physics, make_entity({shape: "rect", size: xy(20, 10), pos: xy(platform.pos.x, 140), vel: xy(1, 0)}))
physics_add_entity(physics, make_entity({shape: "rect", size: xy(20, 10), pos: xy(platform.pos.x, 130), vel: xy(1, 0)}))

// Walls
physics_add_entity(physics, make_entity({shape: "rect", size: xy(383,  20), pos: xy(192,   -5), density: infinity, contact_category_mask: CATEGORY.WALL}))
physics_add_entity(physics, make_entity({shape: "rect", size: xy(20, 1224), pos: xy( -5,  612), density: infinity, contact_category_mask: CATEGORY.WALL}))
const right_wall = physics_add_entity(physics, make_entity({shape: "rect", size: xy(20, 1224), pos: xy(388,  612), density: infinity, contact_category_mask: CATEGORY.WALL}))
physics_add_entity(physics, make_entity({shape: "rect", size: xy(383,  20), pos: xy(192, 1214), density: infinity, contact_category_mask: CATEGORY.WALL}))

const diving_board = physics_add_entity(physics, make_entity({
    name: "diving_board",
    shape: "rect",
    size: xy(40, 10),
    angle: -20°,
    pos: xy(355, 50)}))
physics_attach(physics, "torsion_spring", {
    entityA: right_wall, pointA: xy(-10, -570),
    entityB: diving_board, pointB: xy(20, 0)})

// Car ramp
physics_add_entity(physics, make_entity({shape: "rect", size: xy(32, 15), pos: xy(250, 5), density: infinity, angle: 26°}))
physics_add_entity(physics, make_entity({shape: "rect", size: xy(32, 15), pos: xy(273, 5), density: infinity, angle: -26°}))

// Ball ladder
physics_add_entity(physics, make_entity({shape: "rect", size: xy(50,    5), pos: xy(360, 250),  density: infinity, angle: 25°, contact_category_mask: CATEGORY.WALL}))
physics_add_entity(physics, make_entity({shape: "rect", size: xy(200,   5), pos: xy(260, 255),  density: infinity, angle: -25°, contact_category_mask: CATEGORY.WALL}))
physics_add_entity(physics, make_entity({shape: "rect", size: xy(50,    5), pos: xy(360, 195),  density: infinity, angle: 25°, contact_category_mask: CATEGORY.WALL}))
physics_add_entity(physics, make_entity({shape: "rect", size: xy(70,    5), pos: xy(320, 170),  density: infinity, angle: -25°, contact_category_mask: CATEGORY.WALL}))
physics_add_entity(physics, make_entity({shape: "rect", size: xy(6,   140), pos: xy(288, 177),  density: infinity, contact_category_mask: CATEGORY.WALL}))
physics_add_entity(physics, make_entity({shape: "rect", size: xy(100,   6), pos: xy(335, 110),  density: infinity, contact_category_mask: CATEGORY.WALL}))

// Landing platforms
physics_add_entity(physics, make_entity({shape: "rect", size: xy(40, 5), pos: xy(45, 100), friction: 1, stiction_factor: 10, density: infinity}))
physics_add_entity(physics, make_entity({shape: "rect", size: xy(40, 5), pos: xy(110, 100), friction: 1, stiction_factor: 10, density: infinity}))

// Fluid-like balls
for i < 80:
   physics_add_entity(physics, make_entity({
       shape: "disk", 
       size: xy(7, 7), 
       pos: xy(random(290, 370), 250 + random(0, 600)),
       friction: 0, 
       stiction_factor: 0, 
       restitution: 50%, 
       drag: 4%,
       contact_category_mask: CATEGORY.BALL}))

physics_attach(physics, "weld",   {entityA: weldBox1, entityB: weldBox2})

physics_attach(physics, "pin",    {entityB: pendulum, pointB: xy(-½ pendulum.size.x, 0)})

physics_attach(physics, "spring", {entityA: platform, pointA: xy(⅓ platform.size.x, 0), entityB: ball, length: 25, damping: 0.1%, stiffness: 0.05%})

// Newton's cradle
physics_attach(physics, "rod",    {pointA: newton1.pos + xy(0, 50), entityB: newton1, length: 50})
physics_attach(physics, "rod",    {pointA: newton2.pos + xy(0, 50), entityB: newton2, length: 50})
physics_attach(physics, "rod",    {pointA: newton3.pos - xy(50, 0), entityB: newton3, length: 50})

// Chain
local:
   let prev = platform
   const width = 3
   const length = 14
   const ropeGroup = make_contact_group()
   for i < 7:
      const curr = make_entity({shape: "rect", size: xy(width, length), density: 0.5, drag: 0.08,
                               pos: platform.pos - xy(⅓ platform.size.x, ½ platform.size.y + length * (i + ½)),
                               contact_group: ropeGroup})
      physics_add_entity(physics, curr)
      physics_attach(physics, "pin", {
         entityA: prev,
         pointA: (if i == 0 then xy(-⅓ platform.size.x, -½ platform.size.y) else xy(0, 1 - ½ length)),
         entityB: curr,
         pointB: xy(0, ½ length - 1)})
      prev = curr
               
const objectArray = ["car", "person", "box"]


def accelerate(entity, force, maxSpeed):
   if sign(force.x) * entity.vel.x < |maxSpeed.x|: entity.force.x = force.x
   if sign(force.y) * entity.vel.y < |maxSpeed.y|: entity.force.y = force.y


def particle_spawn(contact):
   for pos in [contact.point0, contact.point1]:
      if pos:
         for i < 30:
            push(particle_array, {pos: clone(pos), vel: random(1, 2) * random_direction2D(),
                                 color: hsv(random(), 50%, 100%), life: random_integer(8, 16)})

def particle_update(particle):
    with pos, vel, color, life in particle:
        --life; pos += vel 
        draw_point(pos, color, 10)
        if life < 0: return iterate.REMOVE


// Spawn particles on hard collisions, excluding the balls hitting a wall
physics_add_contact_callback(physics, particle_spawn, 1.9, ∞, bitnot (CATEGORY.BALL bitor CATEGORY.WALL))
   

frame
────────────────────────────────────────────────────────────────────────
set_background(#234)

// Process user input
if joy.bb: control = (control + 1) mod size(objectArray)
const object = objectArray[control]

let scheme = "⍇⍈⍐"
if object == "car":
   wheel1.torque = -4 joy.x
   wheel2.torque = -4 joy.x
   if joy.yy:
      // Throw the car in the air and try to level it
      carFrame.vel.y = 10
      carFrame.angle = 0
      carFrame.spin = 0
      
else if object == "box":
   // Box
   accelerate(box, 4 xy(joy.x, joy.y), xy(4, 4))
   scheme += "⍗"
   
else if object == "person":
   // Horizontal movement (with air control)
   accelerate(person, xy(2 joy.x, 0), xy(1, 0))

   // Jump
   if joy.aa or joy.yy > 0:
      // Test whether the character is on the ground
      const childRegion = {shape: "rect", pos: xy(0, -person.size.y / 2), size: xy(120% person.size.x, 3)}
      if physics_entity_has_contacts(physics, person, childRegion, xy(0, 1)):
        person.vel.y += 6

// Instructions
draw_text({font: font, text: "Move " + object + ": " + replace(scheme, joy.prompt), pos: xy(10, 200), color: #f96, shadow: #0008, z: 100})
draw_text({font: font, text: replace("Next object: ⓑ", joy.prompt), pos: xy(10, 190), color: #f96, shadow: #0008, z: 100})

// Move the animated platforms
entity_move(platform, xy(40 sin(0.05 mode_frames) + 200, 120))
entity_move(elevator, xy(elevator.pos.x, clamp(oscillate(mode_frames, -45, 148), 3, 100)))

// If something is on the trigger, run the spinner
if physics_entity_has_contacts(physics, trigger):
   if spinner.spin < 2°:
      spinner.spin += 1°
      spinner.torque = 15

physics_simulate(physics)

// Simulate and draw particles
iterate(particle_array, particle_update);

// Force the debugging view to draw physics (a normal game
// would not need this), and disable the IDE's option for
// physics debugging.
draw_physics(physics)
device_control("set_debug_flag", "physics", false)
